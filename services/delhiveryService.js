const axios = require('axios');

class DelhiveryService {
    constructor() {
        // Use the provided Delhivery API key directly
        this.apiKey = '54e7ec8ee21a4ca7868fad95deb369875b1a7e44';
        // Production Delhivery API endpoints (corrected)
        this.baseUrl = 'https://track.delhivery.com';
        this.surfaceApiUrl = 'https://track.delhivery.com/api/cmu/create.json';
        this.trackingUrl = 'https://track.delhivery.com/api/v1/packages/json';
        this.serviceabilityUrl = 'https://track.delhivery.com/api/pin-codes/json/';
        this.ratesUrl = 'https://track.delhivery.com/api/kinko/v1/invoice/charges/.json';
    }

    // Get delivery rates
    async getDeliveryRates(params) {
        try {
            const { fromPincode, toPincode, weight, codAmount = 0 } = params;

            const requestData = {
                md: 'S', // Mode: Surface
                ss: 'Delivered', // Status
                d_pin: toPincode,
                o_pin: fromPincode,
                cgm: weight * 1000, // Convert kg to grams
                pt: codAmount > 0 ? 'COD' : 'Pre-paid'
            };

            const response = await axios.get(this.ratesUrl, {
                params: requestData,
                headers: {
                    'Authorization': `Token ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            });

            if (response.data && response.data[0]) {
                const rateData = response.data[0];
                return {
                    success: true,
                    data: {
                        totalAmount: rateData.total_amount || 0,
                        baseRate: rateData.freight_amount || 0,
                        codCharges: rateData.cod_amount || 0,
                        fuelSurcharge: rateData.fuel_surcharge || 0,
                        serviceTax: rateData.service_tax || 0,
                        estimatedDays: '2-4',
                        currency: 'INR'
                    }
                };
            }

            // No rate data available from Delhivery
            return {
                success: false,
                error: 'No rate data available from Delhivery for this route'
            };

        } catch (error) {
            console.error('Delhivery rate calculation error:', error.response?.data || error.message);
            
            return {
                success: false,
                error: error.response?.data?.message || error.message || 'Failed to calculate delivery rates'
            };
        }
    }

    // Create shipment
    async createShipment(orderData) {
        try {
            const {
                orderId,
                orderNumber,
                customerName,
                customerPhone,
                customerEmail,
                shippingAddress,
                items,
                codAmount = 0,
                weight = 1
            } = orderData;

            const shipmentData = {
                shipments: [{
                    name: customerName,
                    add: `${shippingAddress.addressLine1}, ${shippingAddress.addressLine2 || ''}`.trim(),
                    pin: shippingAddress.postalCode,
                    city: shippingAddress.city,
                    state: shippingAddress.state,
                    country: shippingAddress.country || 'India',
                    phone: customerPhone,
                    order: orderNumber,
                    payment_mode: codAmount > 0 ? 'COD' : 'Prepaid',
                    return_pin: process.env.RETURN_PINCODE || '110001',
                    return_city: process.env.RETURN_CITY || 'New Delhi',
                    return_phone: process.env.RETURN_PHONE || '9999999999',
                    return_add: process.env.RETURN_ADDRESS || 'Return Address',
                    return_state: process.env.RETURN_STATE || 'Delhi',
                    return_country: 'India',
                    products_desc: items.map(item => item.name).join(', '),
                    hsn_code: '9999',
                    cod_amount: codAmount,
                    order_date: new Date().toISOString().split('T')[0],
                    total_amount: codAmount,
                    seller_add: process.env.SELLER_ADDRESS || 'Seller Address',
                    seller_name: process.env.SELLER_NAME || 'Ghanshyam Murti Bhandar',
                    seller_inv: orderNumber,
                    quantity: items.reduce((sum, item) => sum + item.quantity, 0),
                    waybill: '', // Will be generated by Delhivery
                    shipment_width: 10,
                    shipment_height: 10,
                    weight: weight,
                    seller_gst_tin: process.env.SELLER_GST || '',
                    shipping_mode: 'Surface',
                    address_type: 'home'
                }]
            };

            const response = await axios.post(this.surfaceApiUrl, 
                `format=json&data=${JSON.stringify(shipmentData)}`,
                {
                    headers: {
                        'Authorization': `Token ${this.apiKey}`,
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );

            if (response.data && response.data.packages) {
                const packageData = response.data.packages[0];
                return {
                    success: true,
                    data: {
                        waybill: packageData.waybill,
                        refnum: packageData.refnum,
                        status: packageData.status,
                        remarks: packageData.remarks,
                        trackingUrl: `https://www.delhivery.com/track/package/${packageData.waybill}`
                    }
                };
            }

            return {
                success: false,
                error: response.data?.rmk || 'Failed to create shipment'
            };

        } catch (error) {
            console.error('Delhivery shipment creation error:', error.response?.data || error.message);
            return {
                success: false,
                error: error.response?.data?.rmk || error.message
            };
        }
    }

    // Track shipment
    async trackShipment(waybill) {
        try {
            const response = await axios.get(this.trackingUrl, {
                params: {
                    waybill: waybill,
                    verbose: 3
                },
                headers: {
                    'Authorization': `Token ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.data && response.data.ShipmentData) {
                const shipmentData = response.data.ShipmentData[0];
                const shipment = shipmentData.Shipment;
                
                return {
                    success: true,
                    data: {
                        waybill: shipment.AWB,
                        status: shipment.Status.Status,
                        statusDate: shipment.Status.StatusDateTime,
                        origin: shipment.Origin,
                        destination: shipment.Destination,
                        estimatedDelivery: shipment.ExpectedDeliveryDate,
                        currentLocation: shipment.Status.Instructions,
                        scans: shipment.Scans || []
                    }
                };
            }

            return {
                success: false,
                error: 'No tracking data available'
            };

        } catch (error) {
            console.error('Delhivery tracking error:', error.response?.data || error.message);
            return {
                success: false,
                error: error.response?.data?.message || error.message
            };
        }
    }

    // Check serviceability
    async checkServiceability(pincode) {
        try {
            console.log(`üîç Checking Delhivery serviceability for pincode: ${pincode}`);
            
            // Real Delhivery API call with correct endpoint
            const response = await axios.get('https://track.delhivery.com/api/pin-codes/json/', {
                params: {
                    token: this.apiKey,
                    filter_codes: pincode
                },
                timeout: 15000
            });

            if (response.data && response.data.delivery_codes && response.data.delivery_codes.length > 0) {
                const serviceData = response.data.delivery_codes[0];
                console.log(`‚úÖ Delhivery API response for ${pincode}:`, serviceData);
                
                // If we have delivery_codes, the pincode is serviceable
                // The API might return minimal data, so we'll assume serviceable
                return {
                    success: true,
                    data: {
                        pincode: serviceData.pin_code || serviceData.postal_code?.pin || pincode,
                        city: serviceData.postal_code?.city || 'Serviceable City',
                        state: serviceData.postal_code?.state_code || 'Serviceable State',
                        isServiceable: true, // If API returns delivery_codes, it's serviceable
                        codAvailable: true,  // Assume COD available for major cities
                        prepaidAvailable: true, // Assume prepaid available
                        cashPickupAvailable: true, // Assume pickup available
                        repl: true, // Assume REPL available
                        is_oda: false // Assume not ODA
                    }
                };
            }

            // If no delivery codes found, pincode is not serviceable
            console.log(`‚ùå Pincode ${pincode} not serviceable by Delhivery`);
            return {
                success: false,
                error: 'Pincode not serviceable by Delhivery'
            };

        } catch (error) {
            console.error(`‚ùå Delhivery serviceability check error for ${pincode}:`, error.response?.data || error.message);
            
            // Return actual error from Delhivery API
            return {
                success: false,
                error: error.response?.data?.message || error.message || 'Failed to check serviceability'
            };
        }
    }

    // Cancel shipment
    async cancelShipment(waybill) {
        try {
            const response = await axios.post(`${this.baseUrl}/api/p/edit`, {
                waybill: waybill,
                cancellation: true
            }, {
                headers: {
                    'Authorization': `Token ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            return {
                success: true,
                data: response.data
            };

        } catch (error) {
            console.error('Delhivery cancellation error:', error.response?.data || error.message);
            return {
                success: false,
                error: error.response?.data?.message || error.message
            };
        }
    }
}

module.exports = new DelhiveryService();